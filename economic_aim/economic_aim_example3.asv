%1.创建数据
% 定义数据点
% var_y = [10.8934, 10.9669, 11.0795, 11.1729, 11.2489, 11.3117, 11.3647, 11.4101, ...
%      11.4499, 11.4852, 11.5169, 11.5169, 11.7280, 11.8543, 11.9444, 12.0134, ...
%      12.0684, 12.1134, 12.1510, 12.1830];
% var_u = [9.8437, 6.8294, 5.4561, 4.6380, 4.0871, 3.6884, 3.3835, 3.1419, ...
%      2.9436, 2.7774, 2.6353, 2.6353, 1.8317, 1.4471, 1.2076, 1.0408, ...
%      0.9171, 0.8215, 0.7452, 0.6831];
var_y =[10.8911407242743
10.9648446800501
11.0774223068009
11.1706994070474
11.2465590435138
11.3091951778350
11.3620050531698
11.4073827416783
11.4470398694207
11.4822001078077
11.5137612100564
11.7239820789073
11.8496525776055
11.9391920140443
12.0077270689511
12.0623389040236
12.1070520999609
12.1444025098366
12.1761067361694
12.2033688067134];
var_u=[
    var_u
];
% 多项式拟合
p = polyfit(var_u, var_y, 3); % 拟合三次多项式
var_u_fit = linspace(min(var_u), max(var_u), 100); % 生成平滑曲线的 x 点
var_y_fit = polyval(p, var_u_fit); % 计算对应的 y 值

% 绘制结果
figure;
scatter(var_u, var_y, 'b', 'filled'); % 数据点
hold on;
plot(var_u_fit, var_y_fit, 'r-', 'LineWidth', 2); % 拟合曲线
title('LQG拟合曲线');
xlabel('var(u)');
ylabel('var(y)');
legend('数据点', '拟合曲线');
grid on;

%2.拟合曲线方程 
% 输出拟合结果
disp('拟合系数：');
disp(p);

% 3.优化问题
% J=100-((8.3*1e-3 + 3.1*1e-2*1.294)*(y + 1.35*1e-4*y^2)-1.1)-3;
% x(1):y均值 x(2):u均值  x(3)y方差   x(4)u方差
f=@(x)(100-((8.3*1e-3 + 3.1*1e-2*1.294)*(x(1) + 1.35*1e-4*x(1)^2)-1.1)-3)*-1;
x0=[490 58.3 12.4742 0];
    A = [1  0  2   0;
        -1  0  2   0;
         0  1  0   2;
         0 -1  0   2;
         ];
    b = [500;
         -490;
         80;
         -30;
         ];
    Aeq = [1 -3.7 0 0];
    beq = [274.3];
    VLB = [490 30 0 0];
    VUB = [500 80 100 100];
zyj=fmincon(f, x0, A, b, Aeq, beq, VLB, VUB,'fitting_constraint3',optimoptions('fmincon', 'Display', 'off'));

J=(100-((8.3*1e-3 + 3.1*1e-2*1.294)*(zyj(1) + 1.35*1e-4*zyj(1)^2)-1.1)-3);
zyj
J
%4.绘图
plot(zyj(4), zyj(3), 'k.','MarkerSize', 20);%最优经济参数


